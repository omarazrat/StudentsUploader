/*
 *  StudentsUploader
 *  Cargador de datos de estudiantes a formularios
 *  Este programa fue diseñado para la Santa Iglesia Gnostica Universal, por Nestor Arias -nestor_arias@hotmail.com
 */
package oa.gnosis.selenium.swing;

import java.awt.event.ItemEvent;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import static java.util.stream.Collectors.toList;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import oa.gnosis.selenium.actionrunners.GroupInviteSender;
import oa.gnosis.selenium.actionrunners.Uploader;
import oa.gnosis.selenium.interfaces.Action;
import oa.variabilis.web.utils.RBHelper;
import oa.variabilis.web.utils.SysPropertiesHelper;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.safari.SafariDriver;

/**
 *
 * @author nesto
 */
public class ToolBoxPanel extends javax.swing.JPanel {

    private enum BROWSERTYPE {
        CHROME,
        EDGE,
        FIREFOX,
        INTERNET_EXPLORER,
        OPERA,
        SAFARI
    }
    private ComboBoxModel<String> browserModel;
    private final String PREF_SEL_BROWSER = "browser.selected";
    private WebDriver driver = null;
    private List<Action> actions;

    /**
     * Creates new form ToolBoxPanel
     */
    public ToolBoxPanel() {
        final List<String> browserOpts = Arrays.asList(BROWSERTYPE.values())
                .stream()
                .map(type -> RBHelper.sgetString("browser.opt." + type.name()))
                .collect(toList());
        this.browserModel = new DefaultComboBoxModel<>(new Vector<String>(browserOpts));
        actions = new LinkedList<Action>();
        actions.add(new Uploader());
        actions.add(new GroupInviteSender());
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        toolsPane = new javax.swing.JPanel();
        optionsSP = new javax.swing.JScrollPane();
        options = new javax.swing.JPanel();
        browserL = new javax.swing.JLabel();
        browser = new javax.swing.JComboBox<>();
        inviteLbl = new javax.swing.JLabel();
        inviteSP = new javax.swing.JScrollPane();
        invite = new javax.swing.JTextArea();
        selOpenChatL = new javax.swing.JLabel();
        selOpenChat = new javax.swing.JTextField();
        selOpenWaWebL = new javax.swing.JLabel();
        selOpenWaWeb = new javax.swing.JTextField();
        selSndBtnL = new javax.swing.JLabel();
        selSndBtn = new javax.swing.JTextField();
        testMode = new javax.swing.JCheckBox();

        setMinimumSize(new java.awt.Dimension(710, 450));
        setPreferredSize(new java.awt.Dimension(710, 450));

        jTabbedPane1.setMinimumSize(new java.awt.Dimension(700, 440));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(700, 400));

        toolsPane.setPreferredSize(new java.awt.Dimension(400, 300));
        for(Action action:actions){
            javax.swing.JButton btn = new JButton(action.getName());
            btn.addActionListener((evt)->action.run(driver));
            //        System.out.println(btn.getActionCommand());
            toolsPane.add(btn);
        }
        toolsPane.setLayout(new java.awt.GridLayout(2, 1));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("global"); // NOI18N
        jTabbedPane1.addTab(bundle.getString("actions.label"), toolsPane); // NOI18N

        optionsSP.setMinimumSize(new java.awt.Dimension(700, 440));
        optionsSP.setPreferredSize(new java.awt.Dimension(700, 440));

        options.setMinimumSize(new java.awt.Dimension(700, 440));
        options.setPreferredSize(new java.awt.Dimension(700, 440));
        options.setRequestFocusEnabled(false);
        options.setLayout(new java.awt.GridBagLayout());

        browserL.setText(bundle.getString("browser.label")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        options.add(browserL, gridBagConstraints);

        browser.setModel(getBrowserModel());
        browser.setSelectedItem(SysPropertiesHelper.getProp(PREF_SEL_BROWSER, browser.getSelectedItem().toString()));
        updateBrowserState();
        browser.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                browserItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        options.add(browser, gridBagConstraints);

        inviteLbl.setText(bundle.getString("plugin.GroupInviteSender.message.label")); // NOI18N
        inviteLbl.setToolTipText(bundle.getString("plugin.GroupInviteSender.message.tooltip")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        options.add(inviteLbl, gridBagConstraints);

        inviteSP.setMinimumSize(new java.awt.Dimension(166, 200));
        inviteSP.setName(""); // NOI18N
        inviteSP.setPreferredSize(new java.awt.Dimension(166, 200));

        invite.setColumns(20);
        invite.setRows(20);
        invite.setText(bundle.getString("plugin.GroupInviteSender.message")); // NOI18N
        invite.setText(SysPropertiesHelper.getProp("plugin.GroupInviteSender.message",invite.getText()));
        invite.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                inviteCaretUpdate(evt);
            }
        });
        inviteSP.setViewportView(invite);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 100;
        options.add(inviteSP, gridBagConstraints);

        selOpenChatL.setText(bundle.getString("plugin.GroupInviteSender.selOpenChat.label")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        options.add(selOpenChatL, gridBagConstraints);

        selOpenChat.setText(bundle.getString("plugin.GroupInviteSender.selOpenChat")); // NOI18N
        selOpenChat.setText(SysPropertiesHelper.getProp("plugin.GroupInviteSender.selOpenChat",selOpenChat.getText()));
        SysPropertiesHelper.setProp("plugin.GroupInviteSender.selOpenChat",selOpenChat.getText());
        selOpenChat.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                selOpenChatCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        options.add(selOpenChat, gridBagConstraints);

        selOpenWaWebL.setText(bundle.getString("plugin.GroupInviteSender.selOpenWaWeb.label")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        options.add(selOpenWaWebL, gridBagConstraints);

        selOpenWaWeb.setText(bundle.getString("plugin.GroupInviteSender.selOpenWaWeb")); // NOI18N
        selOpenWaWeb.setText(SysPropertiesHelper.getProp("plugin.GroupInviteSender.selOpenWaWeb",selOpenWaWeb.getText()));
        SysPropertiesHelper.setProp("plugin.GroupInviteSender.selOpenWaWeb",selOpenWaWeb.getText());
        selOpenWaWeb.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                selOpenWaWebCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        options.add(selOpenWaWeb, gridBagConstraints);

        selSndBtnL.setText(bundle.getString("plugin.GroupInviteSender.selBtnSend.label")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        options.add(selSndBtnL, gridBagConstraints);

        selSndBtn.setText(bundle.getString("plugin.GroupInviteSender.selBtnSend")); // NOI18N
        selSndBtn.setText(SysPropertiesHelper.getProp("plugin.GroupInviteSender.selBtnSend",selSndBtn.getText()));
        SysPropertiesHelper.setProp("plugin.GroupInviteSender.selBtnSend",selSndBtn.getText());
        selSndBtn.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                selSndBtnCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        options.add(selSndBtn, gridBagConstraints);

        testMode.setText(bundle.getString("plugin.testMode")); // NOI18N
        testMode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SysPropertiesHelper.setProp("plugin.testMode", ""+false);
        testMode.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                testModeStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        options.add(testMode, gridBagConstraints);

        optionsSP.setViewportView(options);

        jTabbedPane1.addTab(bundle.getString("options.label"), optionsSP); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browserItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_browserItemStateChanged
        if (evt.getStateChange() != ItemEvent.SELECTED) {
            return;
        }
        updateBrowserState();
    }//GEN-LAST:event_browserItemStateChanged

    private void inviteCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_inviteCaretUpdate
        SysPropertiesHelper.setProp("plugin.GroupInviteSender.message", invite.getText());
    }//GEN-LAST:event_inviteCaretUpdate

    private void selOpenChatCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_selOpenChatCaretUpdate
        SysPropertiesHelper.setProp("plugin.GroupInviteSender.selOpenChat", selOpenChat.getText());
    }//GEN-LAST:event_selOpenChatCaretUpdate

    private void selOpenWaWebCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_selOpenWaWebCaretUpdate
        SysPropertiesHelper.setProp("plugin.GroupInviteSender.selOpenWaWeb", selOpenWaWeb.getText());
    }//GEN-LAST:event_selOpenWaWebCaretUpdate

    private void selSndBtnCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_selSndBtnCaretUpdate
        SysPropertiesHelper.setProp("plugin.GroupInviteSender.selSndBtn", selSndBtn.getText());
    }//GEN-LAST:event_selSndBtnCaretUpdate

    private void testModeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_testModeStateChanged
        SysPropertiesHelper.setProp("plugin.testMode", ""+testMode.isSelected());
    }//GEN-LAST:event_testModeStateChanged

    private void updateBrowserState() {
        final String selectedBrowser = browser.getSelectedItem().toString();
        SysPropertiesHelper.setProp(PREF_SEL_BROWSER, selectedBrowser);
        setDriver(selectedBrowser);
    }

    public ComboBoxModel<String> getBrowserModel() {
        return browserModel;
    }

    public void setBrowserModel(ComboBoxModel<String> browserModel) {
        this.browserModel = browserModel;
    }

    private void setDriver(String selectedBrowser) {
        if (driver != null) {
            driver.quit();
            driver = null;
        }
        try {
            for (BROWSERTYPE type : BROWSERTYPE.values()) {
                if (RBHelper.sgetString("browser.opt." + type.name()).equals(selectedBrowser)) {
                    switch (type) {
                        case CHROME:
                            driver = new ChromeDriver();
                            break;
                        case EDGE:
                            driver = new EdgeDriver();
                            break;
                        case FIREFOX:
                            driver = new FirefoxDriver();
                            break;
                        case INTERNET_EXPLORER:
                            driver = new InternetExplorerDriver();
                            break;
                        case OPERA:
                            driver = new OperaDriver();
                            break;
                        case SAFARI:
                        default:
                            driver = new SafariDriver();
                            break;
                    }
                    return;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void dispose() {
        driver.quit();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> browser;
    private javax.swing.JLabel browserL;
    private javax.swing.JTextArea invite;
    private javax.swing.JLabel inviteLbl;
    private javax.swing.JScrollPane inviteSP;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel options;
    private javax.swing.JScrollPane optionsSP;
    private javax.swing.JTextField selOpenChat;
    private javax.swing.JLabel selOpenChatL;
    private javax.swing.JTextField selOpenWaWeb;
    private javax.swing.JLabel selOpenWaWebL;
    private javax.swing.JTextField selSndBtn;
    private javax.swing.JLabel selSndBtnL;
    private javax.swing.JCheckBox testMode;
    private javax.swing.JPanel toolsPane;
    // End of variables declaration//GEN-END:variables
}
